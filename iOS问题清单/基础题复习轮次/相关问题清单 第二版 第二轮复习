相关问题清单 第二版 第二轮复习

-1. 
OC的方法调用本质上是向对象发送消息
对象收到消息之后，首先会通过isa指针找到对应的类对象或者元类对象
在类对象或者元类对象的方法缓存中查找对应的SEL
方法缓存中没有查找到，就查找对象的方法列表
方法列表中没有查找到，进入消息转发阶段
动态解析，允许调用者通过runtime动态添加方法接收消息，返回no进入下一阶段
快速消息转发(备用接收者)，允许调用者将消息转发给其他对象，返回nil/self进入下一阶段
完整消息转发，可以对消息重签名，重新封装为NSInvocation，允许调用者在重签名后将消息转发给若干个其他对象，或者直接丢弃；重签名阶段返回nil，进入下一阶段
undefined selector，默认抛出异常

2.
实例对象的isa指针指向类对象
类对象的isa指针指向元类对象
元类对象的isa指针指向根元类对象
根元类对象的isa指针指向自己

类对象的父类为父类对象，最终为nsobject，根类对象没有父类
元类对象的父类对象为父元类对象，根类元类对象的父类为nsobject

3.
iOS通过对象的引用计数来管理内存
mrc为手动管理引用计数，需要调用者手动调用retain、release、autorelease等方法
arc为自动管理引用计数，编译器会在编译期自动添加引用计数的相关方法调用，并且增加部分优化

合并连续的+1-1; 跳过一些可以省略的autorelease调用，函数返回的对象如果立即会被retain,retain会和函数末尾的autorelease合并；

4.
非手动情况下，缓存调用了autorelease的对象
手动情况下，缓存作用域内的对象

5.
底层autoreleasepage组成的双向链表，每个page4096字节，键值对记录对象的内存地址及其引用计数？

6.
系统在runloop中注册了3个observer
在runloop即将启动的时候，注册优先级最高的observer，初始化pool
在runloop即将休眠的时候，注册优先级最低的observer，释放旧的pool，初始化新的pool
在runloop即将释放的时候，注册优先级最低的observer，释放旧的pool

7.
在对象最后一个release之后调用
子类的dealloc结束之后会自动调用父类的dealloc方法
在根类才释放成员变量的引用，以及清空引用计数表，清除弱引用，清除关联对象

8.
所有的线程都可以有runloop，主线程的runloop系统默认已经初始化，子线程的runloop需要调用者手动初始化
runloop会在线程释放的时候释放

9.
保持线程活跃，使得线程在有任务的时候执行任务，没有任务的时候休眠

10.
runloop在某一时刻只能在一个mode下运行，处理当前mode中的事件。
切换mode需要停止当前运行的mode
currentMode会把注册的任务同步到当前运行的mode下

11.
即将启动
检查并执行timer的事件
检查source0事件
执行source0事件
检查并执行source1事件，回到timer
即将休眠
收到source0，timer事件，即将唤醒
处理唤醒事件，回到timer
即将结束

12.
source0为端口间事件，接收到之后会标记需要执行，在runloop下一步中处理事件
source1为应用内事件，接收到之后就可以直接处理

13.
gcd
nsthread
nsoperation

14.
serial
concurrent

15.
包含上下文的函数封装的oc对象

16.
没用引用局部临时变量的为全局block
引用了局部临时闭那辆的为栈block
栈block调用了copy方法的为堆block

17.
block内部是函数的作用域，引用上下文的变量涉及到跨作用域
对于局部的临时变量，会自动增加auto关键字，向block对象值传递
静态局部变量，会向block传递指针
全局变量，可以跨作用域访问

18.
arc下block在以下情况下会自动调用copy，从栈移动到堆
作为函数返回值
系统动画core animation的api中作为参数
gcd的api中作为参数

19.
将局部临时变量在block内部的引用封装成对象，使得可以在block内部修改__block修饰的对象

20.
block被对象持有，持有对象被block引用

21.
通过runtime，动态增加子类
并重写观测属性的setter方法，class方法

22.
valuewillchange
valuedidchange

23.
观察者已经释放，没有解除观察状态
过度解除观察者

24.
setValue:forKey(Path):
valueForKey(Path):

25.
setKey _key _isKey key isKey
_key _isKey key isKey 

26.
category是在运行时会把方法、关联属性、实现的协议同步到类对象，实现的时候不需要类的源码，不能声明成员变量
extension是在编译期就会将方法、属性、实现的协议同步到类对象中，实现的时候需要有类的源码，可以声明成员变量

27.
category_t是一个单独的结构体，可以实现方法和协议，不能声明成员变量但是可以声明关联变量，会在被引用的时候同步到原本的类中

28.
类的属性在编译期已经决定了会占多少内存空间，category声明的属性不会在编译期加入类的编译

29.
load是在应用objc初始化的时候，注册完所有的文件，按照父类、子类、分类的顺序依次执行的方法，不需要在子类调用super，如果子类没有实现则不会调用，分类实现了load方法，会按照注册的顺序依次全部执行
initialize是类被第一次调用的时候执行的方法，会按照父类、子类的顺序执行方法，不需要调用super，如果子类没有实现会再次调用父类的实现，如果分类实现了，会覆盖子类实现

30.
加载所有可执行文件
加载动态库，符号绑定
初始化objc，注册文件,检查selector的唯一性
load方法执行，初始化C++全局静态变量，调用需要在main函数执行前执行的函数
main
didfinishlaunchwithOption

31.
减少动态库数量，减少load方法
将耗时的初始化操作转移到子线程

32.
计时器定时获取当前所有在执行的线程及方法栈，推断执行过长的方法
在执行方法中打点记录方法执行的时长

33.


34.
预编译 引入的头文件转换，判断宏，移除注释
词解析 拆分为单词，记录位置
语法解析 组合成语法句子，记录位置
静态解析 检查方法实现，对象类型等语法错误
中间代码


35.
只提交中间代码生成的二进制文件，允许App Store根据需要对应用进行优化

36.
硬件收到触摸事件生成ioevent，传递给SpringBoard
springboard根据需要将事件分发至应用的事件列表，并触发source0事件
source0 生成 source1事件 告知application有事件需要处理
application从事件队列中取出uievent，通过test-hit，从application-window-viewcontroller-view，开始查找第一响应控件
找到第一响应控件之后判断控件是否能处理该事件，如若不能则将事件传递到上一层控件直到传递给window-application,如若都不能处理，则抛弃事件

37.


38.
