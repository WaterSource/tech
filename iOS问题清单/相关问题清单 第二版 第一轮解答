相关问题清单 第二版 第一轮解答

1.
OC的方法调用在运行时是对对象发送消息

对象接收到消息之后，会通过isa指针找到对应的类对象，如果是类方法会找到元类对象；
在类对象或者元类对象的方法缓存中查找，方法列表中查找，父类方法列表中查找；
如果都没有找到对应的方法，进入转发机制；

动态解析，可以动态关联一个方法实现方法接收；
返回NO进入快速消息转发(备用接收者)，将消息转发给其他对象接收；
返回nil/self进入完整消息转发，通过对方法重签名生成NSInvocation，然后转发给若干个对象接收；
重签名返回nil，进入 unrecognized selector 方法，默认抛出异常；

2.
对象的isa指针指向类对象，类对象的isa指针指向元类对象，元类对象的isa指针指向根元类对象，根元类对象的isa指针指向自己；
类对象的父类是父类对象，最后指向NSObject，NSObject没有父类对象；
元类对象的父类是父类的元类对象，最后指向NSObject的元类对象，NSObject的元类对象的父类为NSObject；

3.
OC是使用引用计数管理内存；
MRC需要手动添加retain、release、autorelease方法手动管理；
ARC在编译阶段自动加入了内存管理方法，并且做了优化；
连续的retain、release等+1-1操作合并；
函数返回的对象马上被retain的，也合并了autorelease和retain操作；

4.
手动创建的pool，会缓存在其作用域内的对象，离开作用域就会释放；
非手动创建的，会缓存调用了autorelease方法的对象，在当前runloop进入休眠或者退出时释放；

-5.
autoreleasepool内部为autoreleasepage组成的双向链表，每个page最大为4096字节，保存在pool中的对象的指针；

6.
系统在runloop中注册了3个observer
在runloop启动时，优先级最高，初始化pool
即将休眠时，优先级最低，释放旧的pool，创建新的pool
在即将退出时，优先级最低，释放旧的pool

7.
在对象最后一次release之后，会调用dealloc方法；
对象的dealloc方法调用结束之后，会自动调用父类的dealloc方法；
在根类的dealloc方法中，会清空引用计数表、弱引用表，同时把自身的弱引用置为nil，释放关联对象；

-8.
每个线程都对应一个runloop，子线程的runloop需要手动初始化，主线程的runloop在程序启动时已经初始化了；
runloop和线程的关系保存在全局字典中；
线程释放runloop也会销毁；

9. 
保持线程存活，在有任务时激活线程执行任务，无任务时保持线程休眠；

10.
在同一时刻下，runloop只能运行在一个mode下，切换mode会暂停当前mode的任务；
commonmode会把自身的任务同步到当前正在运行的mode下；

11. 
runloop即将启动
检查timer事件
检查source0事件，看是否有需要执行的任务
执行source0事件
检查source1事件，并执行，在执行后回到检查timer事件
即将休眠
休眠
收到事件，即将唤醒runloop
处理唤醒事件，在执行后回到检查timer事件
释放runloop

-12.
source0，非端口事件，只传递函数指针，不会主动触发事件；
source1，端口事件，由系统层面下发的事件，会主动唤醒runloop并处理；

13.
GCD
NSOperation
NSThread

14.
serial 串行队列
concurrent 并行队列

15.
block是封装函数及其上下文的oc对象
在内存空间的不同位置，分为了全局、栈、堆
继承自NSBlock

16.
被block捕获的临时变量会在编译期加上auto关键字；
没有捕获auto变量的是全局block，保存在全局数据区，会在程序结束时释放；
捕获了auto变量的是栈block，保存在栈，调用后就释放；
栈block调用了copy方法的就会转移到堆，使用引用计数管理释放；

17.
因为block封装了函数，涉及到了跨作用域调用，所以会捕获block内部有使用的变量；
临时变量会值拷贝
静态变量会指针拷贝
全局变量可以直接访问，增加其引用计数

18.
在arc下在这些情况会对栈上的block调用copy方法
被强引用时，
cocoa 动画相关api的block参数，
gcd的block参数，
函数返回值为block的；

19.
block内因为跨作用域，本身不能修改捕获的auto临时变量的值，
用__block修饰，临时变量会被封装成对象，指针传递进block

20.
对象持有block对象，block内部引用了对象，造成了循环引用

21.
通过runtime，生成观测对象的子类实例，并替换观测对象；
其中会重写观测属性的setter方法，class方法；

22.
依次调用
willChangeValue
didChangeValue

23.
全局有字典保存监听和被监听者的关系
观测对象释放，没有取消观测，被观测对象发生变化，crash
观测对象已经取消观测，再次取消观测，crash

24.
setValue:forKey(Path):
valueForKey(Path):

25.
setKey, _key, _isKey, key, isKey
getKey, key, isKey, countForKey，objectInKeyAtIndex, keyAtIndex

26.
分类设置的成员变量不会自动合成
extension需要有源码，可以定义成员变量，声明方法

27.
runtime中有category_t的结构体，记录对应的类，实现的方法、协议，关联的属性对象
在运行时，引用分类后，会把分类中的内容同步到类中

28.
类在编译期已经确定了所有成员变量的内存空间，所以分类不可以在运行时增加成员变量，只能用runtime增加关联属性；

-29.
load会在应用启动时，按照父类 - 子类 - 分类的顺序调用，不需要调用super，类没有重写load方法就不会调用；分类实现了，会按照在程序初始化时类文件注册的顺序逐个调用；

initialize方法会在第一次调用类方法时触发，
会按照继承关系先调用父类方法在调用子类方法，不需要调用super，类没有实现则会调用父类的方法，父类的方法会多次触发；分类有实现，则会覆盖类的实现；

30.
加载所有可执行文件
加载动态库，符号绑定
初始化objc，注册所有的类文件，检查方法唯一性
调用load方法，初始化全局静态变量，调用特定修饰在main函数之前调用的方法，
appdelegate didfinishlaunch

31. 
分为main函数前和main函数后
main之前可以减少动态库的数量
减少load方法的实现
减少C++全局静态变量

main之后可以减少或者延后didfinishlaunch之后的耗时操作

32.
定时抓取主线程上方法的调用栈，估算各个方法的耗时
hook objc_msgSend方法，记录所有方法的调用耗时
打点统计所有耗时事件的开始结束时间

33.
有一个单例manager管理维护一个hashmap，map中键值对为 【对象的指针 ：关联对象map】
associationmap 的键值对为 【属性的key：对象指针】

34.
预处理(头文件处理，宏替换，处理编译条件#if) - 词法解析 - 语法解析 - 静态分析(类型检查，多余属性方法检查) - 中间代码及优化 - 汇编 - 链接(实现目标文件和静态库的链接)

35.
编译的中间状态，允许store在汇编及链接过程优化

36.
系统检测到硬件事件，生成IOEvent，发送到SpringBoard，SpringBoard将事件分发给需要的app进程；
app接收到之后将事件放入活动的事件队列，同时触发系统在runloop注册的source1事件；
source1事件中会通过callback触发source0将IOEvent包装成UIEvent，source0执行应用内响应链的部分；
UIApplication会从事件队列中取出事件，发送给当前在活动的window；
window会通过hit-test方法，判断触摸位置在哪个视图；
找到第一响应视图之后，检查手势和方法响应，不能处理的会重新向上传递直到window或者application，最后丢弃；

37.
CPU计算出要显示的内容，包括视图的创建，位置的计算，图片解码，文本绘制；
计算完成的内容会传递到gpu进行渲染；
渲染结果会提交到帧缓冲区(framebuffer)，等待垂直同步信号(VSync)到来时显示在屏幕上；

38.
会创建额外的帧缓冲区，在上下文切换的时候会影响性能；

圆角、阴影、mask、blur、光栅化、不透明度