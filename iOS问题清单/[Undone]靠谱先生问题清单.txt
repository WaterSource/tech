靠谱先生问题清单

4. 什么情况使用weak关键字，相比assign有什么不同

设置方法既不保留新值，也不释放旧值；
指向的对象释放之后，会同步清空指向nil；
使用weak关键字，避免循环引用；
assign只能修饰基础类型，weak可以修饰OC对象

5. 怎么用copy关键字

在需要拷贝的时候使用，使用了之后会在赋值的时候，对新的值做一次拷贝，使可变对象转换为不可变对象；

7. 如何让自己的类用copy修饰符？如何重写带copy关键字的setter？

实现NSCopying/NSMutableCopying协议；
重写copywithZone方法；
在setter赋值的时候，调用copy方法

8. @property的本质是什么？ivar，getter，setter是如何生成并添加到类中的

自动合成ivar+getter+setter方法；
在编译期自动合成，会在成员列表中增加ivar，在方法列表中实现getter、setter；

9. @protocol和category中如何使用@property

在protocol声明的属性，只会生成setter、getter方法，需要类在声明一次属性；
在category中声明属性，需要通过关联对象，自己实现setter、getter方法

10. runtime怎么实现weak属性

会在对象中建立hash表，weak对象的内存地址作为key，weak对象作为value；
当weak对象释放的时候，触发方法，在hash表中找到以内存地址为key的所有对象设置为nil；

11. property可以有哪些修饰符

内存管理 retain、assign、strong、weak、copy
原子性 nonatomic、atomic
可读性 readonly、readwrite
方法名 getter/setter
swift兼容 nonnull、nullable

12. weak属性需要在dealloc中置nil么

不需要，子类的dealloc方法返回后会自动执行父类的dealloc方法，根类的dealloc方法会释放引用计数表，weak的指针，实例变量；

13. @synthesize @dynamic 分别有什么作用

@synthesize 语意是如果没有手动实现getter、setter方法，编译器会加上这两个方法；
@dynamic getter、setter方法会由用户手动实现，不需要自动生成；

14. ARC下不显式指定，property的默认关键字有哪些

@property (atomic, readWrite, assign) NSInteger x;
@property (atomic, readWrite, strong) NSInteger x;

15. 用@property声明的NSString等不可变属性，经常使用copy关键字，使用strong会有什么问题？

因为父类指针可以指向子类对象；
赋值的时候，如果外部传入的是一个可变对象，那么属性就有风险，外部做修改的时候会影响属性的值；
使用copy关键字会在赋值的时候对值进行拷贝，不会受到外部修改；

16. 对非集合对象的copy操作

[string copy] 相同内存地址
[string mutableCopy] 不同内存地址，返回可变对象

[mutableStr copy] 不同内存地址，返回可变对象？
[mutableStr mutableCopy] 不同内存地址，返回可变对象

17. 对集合对象的copy和mutablecopy

[arr copy] 相同内存地址，元素内存地址不变
[arr mutableCopy] 不同内存地址，元素内存地址不变

[mutableArr copy] 不同内存地址，返回不可变对象，元素内存地址不变
[mutableArr mutableCopy] 不同内存地址，返回可变对象，元素内存地址不变

18. @synthesize合成实例变量的规则是什么？如果已经有带下划线的变量，还会自动合成新的变量么

增加一个带下划线的实例变量，如果已经存在带下划线的变量会使得自动合成失效；

19. 在有了自动合成属性实例变量之后，@synthesize还有那些使用场景

@synthesize xxx = _abcxxx 指定实例变量的名字;
同时写了getter、setter方法，系统不会生成ivar，需要用@synthesize关联实例变量；

20. objc向nil发送消息会怎样

不会发生任何事；向nil发送消息不会crash；

21. 对象调用方法和objc_msgSend()函数的关系

在运行时通过runtime，会把方法调用转换成向这个对象发送消息，objc_msgSend(objc, @selector(), args);

22. 什么时候会报unrecognized selector异常

在消息转发过程中，直到最后一步完整消息转发都不能处理消息，系统会抛出找不到该方法的异常

23. 有父类的情况下，objc对象怎么进行内存布局

所有父类的成员变量和自己的成员变量都会存在该对象所对应的存储空间中；
对象内部有一个isa指针，指向类对象，类对象保存着
方法列表
成员变量列表
属性列表

24. objc对象的isa指针指向什么

实例的isa指向对应的类
类的isa指向对应的元类，superclass指向父类，根类superclass指向nil
元类的isa指向根类的元类，superclass指向父类的元类，superclass指向根类

25. runtime如何通过selector找到对应的IMP地址

类对象中持有方法列表，方法列表中保存方法对象，方法对象有方法名selector,方法地址imp，参数类型

--

25. _objc_msgForward 函数是做什么的，直接调用会发生什么？

在方法列表中找不到方法时，通过调用_objc_msgForward进入消息转发机制；
直接调用会避开方法查找，直接开始消息转发；

26. runtime如何实现weak变量的自动置nil

全局持有weak变量及其引用的字典，weak变量释放的时候，会把对应的引用置nil

27. 能否向编译后得到的类增加实例变量，能否向运行时创建的类中添加实例变量

编译后的类对象已经在runtime中注册了，类结构体中的实例变量链表和实例变量的内存大小已经确定了；

不行，类对象在编译期已经确定了内存空间和实例变量的空间
运行时创建的类可以增加实例变量

31. 猜想runloop内部是怎么实现的

是循环，在循环中监听事件，和处理事件

35. BAD_ACCESS在什么情况下出现

向野指针发送消息

36. 苹果是如何实现autoreleasepool的

是由autoreleasepage组成的双向链表实现的，会对autorelease的对象分别执行push、pop、release方法；

37. 使用block时什么情况会发生引用循环

对象持有了block，block引用了对象或者对象的属性，产生了循环引用

--

45. addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得kvo回调？

observer: 被监听的对象
keyPath: 被监听的实例变量
options: 监听哪些事件
context: 上下文，会传递给回调的方法

47. 实例变量的命名为 NSString *_foo，调用setValue:forKey:时，可以用foo还是_foo为key？

都可以，查找顺序中都鞥呢找到_foo;
set<Key> -> _key -> _is<Key> -> <key> -> is<Key>

49. KVC和KVO的keyPath一定是属性么

kvc支持实例变量
kvo只能手动支持

50. 如何关闭默认的kvo的默认实现，并进入自定义的kvo实现



52. IBOutlet连出来的视图属性为什么可以被设置成weak


