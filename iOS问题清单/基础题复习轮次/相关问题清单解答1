相关问题清单解答1

1. 简述消息发送机制和转发机制

发送机制，oc是一门动态语言，所有的方法调用都会被runtime转化为msgSend(obj, @selector, arg)方法，向调用方发送消息

转发机制，对象收到消息之后:
1) 首先是执行【静态方法解析】 ，在自己的方法列表中查找方法，找到就执行对应方法；如果在自己的方法列表中找不到，那么就会进入父类查找；
2) 如果父类依然查找不到，进入【动态方法解析】。可以动态的添加方法接收对应消息；
3) 如果动态方法解析依然查找不到方法，进入【快速转发(备用接收者)】。可以生成其他对象接收对应的消息；
4) 如果快速转发还是查找不到方法，进入【完整消息转发】。可以重新为方法签名生成新的 【NSInvocation】，生成1个或者多个对象来接收消息，或者丢弃消息；
5) 如果消息还是没有被处理，报错抛出；

2. 对象的关系

对象的结构体中存在属性isa，指向对应的类，找寻实例方法；
类中也存在属性isa，指向对应的元类，找寻类方法；

3. MRC和ARC的区别

OC的内存管理是通过引用计数实现的，在MRC需要手动实现retain、release等方法实现对内存的管理；在arc会在编译阶段自动添加对应的retain、release方法管理对象内存；

arc还实现了合并对称的引用计数操作，将成对的+1-1置为0；跳过一些可以省略的autorelease情况；
在方法返回对象的时候，如果紧接着就要被retain，那么autorelease和retain可以一起省略；

4. autoreleasepool会缓存那些内容

使用了autorelease方法的对象会被注册到pool中，会等到pool结束的时候释放；

5. autoreleasepool底层数据结构

在runloop开始时候，执行创建自动释放池；在runloop准备休眠的时候，释放掉旧的池子，创建新的释放池；
是一个由autoreleasepage(单个是4096字节大小)组成的双向链表；

6. dealloc做了什么

在对象的最后一次release执行后调用dealloc方法，此时还未释放对象的实例变量；
在子类的dealloc返回之后，父类的dealloc方法自动执行；
在最后NSObject的dealloc调用的时候，释放对象的实例变量；

7. Runloop

【runloop和线程的关系】
主线程的runloop默认启动，子线程的runloop需要手动启动；在首次主动获取才会创建runloop；对应关系被保存在全局的字典中；runloop在线程结束的时候销毁；

【runloop的作用】
在没有事件的时候休眠，有事件的时候处理响应；

【runloop和mode的关系】
runloop某个时刻只能在一个mode下运行，处理当前mode中的事件(source,timer,observer);

【runloop和autoreleasepool】
runloop注册了3个observer，在准备启动的时候，注册的最高优先级的事件，初始化autoreleasepool；
在准备休眠的时候，注册优先级最低的事件，释放旧的autoreleasepool，初始化新的autoreleasepool；
在准备退出的时候，注册优先级最低的事件，释放autoreleasepool；

【runloop的事件顺序】
1) runloop准备启动
2) 定时器事件(timer)准备处理
3) 事件源(source0)准备处理
4) 处理source0
5) 事件源(source1)，立即处理，回到步骤2
6) 准备进入休眠
7) 收到事件准备唤醒runloop
8) 处理唤醒的事件，回到步骤2
9) 结束runloop

【source的两个版本】
source0，只传递了对应事件的函数指针，不会主动触发事件，会被标记为待处理，让runloop来处理事件；
source1，包含了mach_port和事件的函数指针，可以主动唤醒runloop处理事件；mach_port被用于通过内核和其他线程通信；

8. 多线程

【NSThread】
控制线程

【NSOperation】
是GCD的封装，只能使用其子类；

【GCD】
控制队列

串行、并发队列

同步、异步执行

9. Block原理

block是封装函数及其上下文的OC对象

本质上是OC对象，存在isa属性，因为在不同的内存分为全局、栈、堆；

继承关系是 NSObject -> NSBlock -> NSConcreteGlobalBlock/StackBlock/MallocBlock

全局block，没有使用auto变量，会保存在数据段，程序结束才会被释放；

栈block，访问了auto变量，保存在栈中，执行完毕就释放；

堆block，栈block调用了copy，保存在堆中，引用计数为0时释放；

10. block截获变量原理

局部变量会自动添加auto关键字，向block对象值传递；
静态变量会向block传递指针；
全局变量不会被捕获，可以直接访问；

11. mrc/arc下 block有什么区别？

在arc下，编译器会在特定情况下自动把栈上的block进行一次copy操作；

1) 作为函数返回值时
2) 被强引用时
3) 被Cocoa系统方法作为参数时
4) 作为gcd方法参数时

12. __block 的作用

把对应变量转换为对象，传递指针进入block

13. 怎么实现KVO

runtime动态添加一个子类，重写被监听的属性的setter方法，重写class方法；
在setter方法中增加 willChangeValue和didChangeValue方法；

14. 手动触发KVO

按顺序调用 willChangeValue和didChangeValue方法；

15. KVO为什么会crash

全局有字典保存监听者和被监听者的关系；
1) 监听者释放，监听关系没有解除；给监听者的野指针发送消息，野指针crash；
2) 被监听者释放，监听关系没有解除；监听者内存释放之后，系统会因为还存在监听关系crash；(测试了一下，没有crash现象)
3) 多次移除监听关系，报多次移除的错误；

16. KVC

设置值顺序，set<Key>方法， _<key>成员变量，_is<Key>成员变量，<key>成员变量，is<Key>成员变量

读取值顺序，get<Key>方法，<key>成员变量，is<Key>成员变量

如果上面的没找到，会继续查找 
countOf<Key>方法，objectIn<Key>AtIndex方法，<Key>AtIndex方法 如果这些方法被找到，就会返回一个NSKeyValueArray；

如果上面的还没找到，继续查找(同时查找，需要三个方法都在)
countOf<Key>, enumeratorOf<Key>, memberOf<Key>
如果都找到了，就会返回一个NSSet；

17. Category和Extension的区别

Category: 分类，不能设置成员变量

Extension: 扩展，需要有类的源码，实现需要在本类中实现，可以定义私有变量；

18. Category的实现原理，为什么只能加方法不能加属性

category中的方法、属性、协议数据放在category_t结构体中，在调用分类的时候会同步拷贝到类对象中；

category增加的属性不会自动生成成员变量和setter、getter方法，因为category_t不存在成员变量；

因为分类是在运行时动态添加到对象的结构体中的，而实例对象的成员变量在编译完成的时候就已经决定好了，所以不能再额外增加成员变量；

19. Category中的load方法是什么时候调用的，可以继承么

category中可以有load方法，会在程序启动的时候调用；

load方法调用顺序，父类 -> 子类 -> category(s)；

20. load、initialize的区别，在Category重写之后的调用顺序

load方法在程序启动的时候就会调用，initialize是在第一次调用该类的方法的时候调用；如果子类没有实现initialize方法，会调用父类的方法，父类可能会调用多次；

如果分类实现了load，会在本来的load方法之后调用，每个实现都会调用；

如果分类实现了initialize，会覆盖本类的initialize方法，只会调用最后的一个实现；

21. 能否向编译后得到的类增加实例变量；能否向运行时创建的类中添加实例变量；

已经编译后的类，不能增加实例变量，实例变量在对象初始的时候已经确定了；

运行时创建的类，可以增加实例变量；

22. app的启动过程

1) 加载可执行文件，app中.o文件的集合；
2) 加载动态链接库，进行符号绑定；
3) ObjC的初始化处理，类的注册，category的注册，selector的唯一性检查；
4) 初始化，执行+load方法，创建C++静态全局变量，attribute((constructor))修饰的函数调用；
5) didFinishLaunchWithOption

