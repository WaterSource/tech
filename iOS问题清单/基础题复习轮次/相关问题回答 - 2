相关问题回答 - 2

1.
OC的方法调用会通过runtime转换为消息发送
实例方法会通过实例对象的isa指针找到对应的类，在类中查找顺序为 缓存-方法列表-父类方法列表
类方法会通过类对象的isa指针找到对应元类，元类中的查找顺序为 缓存-方法列表-父类方法列表

查找不到 进入动态方法解析 可以动态添加方法执行
返回NO 进入快速消息转发(备用接收者) 可以返回别的实例对象来处理该消息
返回nil或者self 进入完整消息转发 通过对方法重新签名生成NSInvocation，可以实现转发到若干个实例对象处理消息
签名返回nil 执行unrecognized selector 默认抛出异常

2.
实例对象isa - 类对象
类对象isa - 元类对象
根类isa - 根元类对象
元类对象isa - 根元类对象
根元类对象isa - 根元类对象isa

类对象父类 - 父类对象
父类对象父类 - 根类对象
根类对象父类 - nil
元类对象父类 - 父类元类对象
根类元类对象 - 根类对象

-3.
OC的内存管理是通过引用计数实现的
mrc需要手动插入retain、release、autorelease等方法实现引用计数管理
arc在编译期可以自动插入内存管理方法实现引用计数管理，并对连续的+1-1做了合并优化；函数返回的对象马上会被retain的情况，会跳过函数内的autorelease

4.
手动情况下缓存作用域内的对象
非手动情况下，自动缓存调用了autorelease的对象

5.
是由大小为4096字节的autoreleasepage组成的双向链表
page内部以栈的形式储存autorelease对象的地址

6.
系统在runloop中注册了3个observer
runloop即将启动的时候 初始化pool
即将休眠的时候 释放旧的pool，创建新的pool
即将退出的时候 释放pool

-7.
在对象最后一次release调用的时候触发dealloc方法
子类的方法返回后会自动调用父类方法
在根类
移除对象的关联对象
清空引用计数表和弱引用表
对弱引用置nil

8.
每个线程都有runloop，主线程默认启动，子线程需要手动初始化并启动

9.
保持线程不释放，在有任务的时候执行任务，没有任务的时候保持休眠

10.
runloop某一时刻只能运行在一个mode下，处理该mode的timer和source事件
commonmode会会同步事件到当前正在执行的mode下

11.
即将启动
处理timer
检查是否有source0事件标记为需要处理
处理source0事件
处理source1事件，如果处理了回到处理timer事件
即将休眠
休眠
收到事件即将唤醒
处理唤醒事件，回到timer
没有事件即将退出

12.
NSThread GCD NSOperation

13.
serial
concurrent

14.
group

15.
返回的队列不准确

-16.
block是封装函数和其上下文的OC对象 继承自NSBlock
针对不同的存储位置区分为全局、堆、栈
没有捕获变量的为全局block，储存在数据区，程序退出才释放
捕获了auto临时变量的是栈block，储存在栈区，调用完就释放
栈block调用了copy方法就会移动到堆区，引用计数为0的时候释放

17.
block可以理解为一个匿名函数，内部引用的变量需要外部传入数据
局部的临时变量系统会自动加上auto前缀，以值传递的形式传入block内部，所以block内不会修改block外的对象；
static修饰局部静态变量，会以指针传递的形式传入block内部；
全局的变量不会被block捕获，可以直接访问；

-18.
函数返回的block，
被强引用时
作为系统方法参数传递的block对会自动被copy
动画相关的cocoa api
gcd api

19.
被__block修饰的对象会被封装成对象传入block内部，使block内可以修改block外的对象；

20.
block本身被对象强引用，内部又引用了该对象，导致循环引用

21.
通过runtime生成对象的子类，重写监听属性的setter方法，对象的class方法；

-22.
willchangevalue
didchangevalue

23.
重复取消监听关系
监听对象释放没有解除关联

24.
setvalue:forkey:
setvalue:forkeypath:

25.
set<Key>, _<key>, _is<Key>, <key>, is<Key>

26.
extension是在编译期就把定义的属性、方法一同写道类对象中；可以定义成员变量、方法、类方法，方法的实现需要写在本类的文件中；
category是在运行时写入的，不能定义成员变量，可以声明方法、类方法及对应的实现；

-27.
category中的方法、属性、协议放在category_t结构体中，在调用分类的时候会同步拷贝到类对象中；
category增加的属性不会自动合成

-28.
类对象的实例变量在编译期已经决定好了，对应的储存空间已经确定；
category是在运行时生效的，category增加的属性不会自动合成，所以不能动态增加实例变量；

-29.
load方法调用顺序 父类 - 子类 - 分类，在每个类装载的时候都会调用一次
子类没有实现load方法，也不会调用父类的方法

-30.
load方法是在程序启动过程中调用了，category重写之后，会在子类后调用，多次重写会依次调用
initialize是在首次引用该类时调用，category重写之后，会覆盖本类的实现，且只调用最后覆盖的实现，子类没有实现会调用父类实现，子类实现了会覆盖父类实现

-31.
加载可执行文件
加载动态库，进行符号绑定
初始化runtime，注册所有的类、分类，检查selector唯一性
执行load方法，初始化全局静态变量，调用xx修饰的方法
appdelegate didfinishlaunch
